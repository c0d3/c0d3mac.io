{
  "name": "docpad-plugin-menu",
  "description": "Automatically generates menu from documents folder",
  "version": "2.1.0",
  "keywords": [
    "docpad",
    "docpad-plugin",
    "menu",
    "structure"
  ],
  "author": {
    "name": "Sergey Chikuyonok",
    "email": "serge.che@gmail.com",
    "url": "http://chikuyonok.ru"
  },
  "maintainers": [
    {
      "name": "Sergey Chikuyonok",
      "email": "serge.che@gmail.com",
      "url": "http://chikuyonok.ru"
    }
  ],
  "contributors": [
    {
      "name": "Sergey Chikuyonok",
      "email": "serge.che@gmail.com",
      "url": "http://chikuyonok.ru"
    }
  ],
  "bugs": {
    "url": "https://github.com/sergeche/docpad-plugin-menu/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/sergeche/docpad-plugin-menu.git"
  },
  "engines": {
    "node": ">=0.4.0",
    "docpad": ">=6.3.x"
  },
  "dependencies": {
    "underscore": "1.3.x"
  },
  "devDependencies": {
    "coffee-script": "1.3.x"
  },
  "main": "./out/menu.plugin.js",
  "readme": "A [DocPad](https://github.com/bevry/docpad) plugin that automatically generates menu structure from `documents` folder for your web-site.\n\n## Installation ##\n\nRun `npm install --save docpad-plugin-menu` command in your DocPad project root.\n    \n## How it works ##\n\nThis plugin takes a plain list of document files and creates structured menu. The `templateData` object of your DocPad config is extended with `generateMenu(url)` which takes passed URL (in most cases, the URL of rendered document) and generates menu aginst it. Each menu item contains `state` property that holds highlighting state of item.\n\nPossible values:\n\n* `\"current\"`: item is a currently viewed document\n* `\"parent\"`: item contains currently viewed document\n* `false`: regular item\n\nThe best way to output menu is to use [partials](https://github.com/docpad/docpad-plugin-partials):\n\n1 - Create `menu.html.eco` partial (I’m using [Eco](https://github.com/sstephenson/eco) templates, but you can use any other):\n\n```html\n<!-- Define `renderMenu` partial -->\n<% renderMenu = (items) => %>\n<ul class=\"nav\">\n    <% for item in items: %>\n        <!-- Highlight menu item if its `item.state` is not false -->\n        <li<% if item.state: %> class=\"selected\"<% end %>>\n            <!-- Remove link if we’re currently viewing this document -->\n            <% if item.state != 'current': %>\n                <a href=\"<%= item.url %>\"><%= item.title %></a>\n            <% else: %>\n                <strong><%= item.title %></strong>\n            <% end %>\n            <!-- Render submenu if item has children -->\n            <% if item.children: %>\n                <%- renderMenu(item.children) %>\n            <% end %>\n        </li>\n    <% end %>\n</ul>   \n<% end %>\n<!-- Run `renderMenu` partial aginst passed `menuItems` meta-data  -->\n<%= renderMenu @menuItems %>\n```\n\n2 - In your template, invoke `menu.html.eco` partial and pass `menuItems` context object containing menu state for currently viewed document:\n\n```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <title>Document</title>\n</head>\n<body>\n    <nav>\n        <%- @partial('menu.html.eco', {menuItems: @generateMenu(@document.url)}) %>\n    </nav>\n</body>\n</html>\n```\n\nNote that you can use a custom collection by calling the generateMenu function this way:\n```html\n@generateMenu(@document.url, \"myCustomCollection\")\n```\nFor more information about custom collections, please see the [Docpad documentation](http://docpad.org/docs/begin#creating-custom-collections-via-the-configuration-file).\n\n## Document meta-data ##\n\nYou can supply your document headers with menu-specific meta-data:\n\n* `menuTitle`: string. Title of menu item. If not defined, document’s `title` property is used.\n* `menuHidden`: boolean. Should current item and its children appear in menu\n* `menuOrder`: number. Order of menu item in its parent. Sorting is ascending.\n\nYou can add any `menu*` meta-data into your document and its value will be available as `menuItem.meta.*` property of menu item. For example, if you add `menuFoo: 1` meta-data, you can use its value like this:\n\n```html\n<% renderMenu = (items) => %>\n<ul class=\"nav\">\n    <% for item in items: %>\n        <% if item.meta.foo == '1': %>\n            <!-- Do something if menuFoo equals '1' -->\n        <% end %>\n    <% end %>\n</ul>   \n<% end %>\n```\n\n## Plugin configuration ##\n\nIn DocPad config file, you can add `menuOptions` object with the following properties:\n\n* `optimize`: boolean. Optimize menu structure: items like `/about/index.html` will be omitted in favour of parent’s `/about/` item. E.g. this option will remove all `index.html` file names from generated structure. Default is `true`.\n* `skipEmpty`: boolean. Removes indermediate items from menu structure that has no content. Default is `true`.\n* `skipFiles`: regexp. Regular expression to skip files from generated menu structure. If document full url matches this regexp, it will not appear in menu.\n\nPlugin usage examples can be found in [Emmet Documentation](https://github.com/emmetio/emmet-docs) web-site source.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/sergeche/docpad-plugin-menu",
  "_id": "docpad-plugin-menu@2.1.0",
  "_from": "docpad-plugin-menu@~2.1.0"
}
