{
  "title": "TaskGroup",
  "name": "taskgroup",
  "version": "3.3.1",
  "description": "Group together synchronous and asynchronous tasks and execute them with support for concurrency, naming, and nesting.",
  "homepage": "https://github.com/bevry/taskgroup",
  "license": {
    "type": "MIT"
  },
  "badges": {
    "travis": true,
    "npm": true,
    "gittip": "bevry",
    "flattr": "344188/balupton-on-Flattr",
    "paypal": "QB8GQPZAH84N6"
  },
  "keywords": [
    "flow",
    "control",
    "async",
    "sync",
    "tasks",
    "batch",
    "concurrency"
  ],
  "author": {
    "name": "2013+ Bevry Pty Ltd",
    "email": "us@bevry.me",
    "url": "http://bevry.me"
  },
  "maintainers": [
    {
      "name": "Benjamin Lupton",
      "email": "b@lupton.cc",
      "url": "https://github.com/balupton"
    }
  ],
  "contributors": [
    {
      "name": "Benjamin Lupton",
      "email": "b@lupton.cc",
      "url": "https://github.com/balupton"
    },
    {
      "name": "sfrdmn",
      "url": "https://github.com/sfrdmn"
    }
  ],
  "bugs": {
    "url": "https://github.com/bevry/taskgroup/issues"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/bevry/taskgroup.git"
  },
  "engines": {
    "node": ">=0.4"
  },
  "dependencies": {
    "ambi": "~2.1.5"
  },
  "devDependencies": {
    "coffee-script": "~1.6.2",
    "joe": "~1.3.0",
    "joe-reporter-console": "~1.2.1",
    "chai": "~1.8.1",
    "projectz": "~0.2.3"
  },
  "directories": {
    "lib": "./out/lib"
  },
  "scripts": {
    "preinstall": "node ./cyclic.js",
    "test": "node ./out/test/taskgroup-test.js"
  },
  "main": "./out/lib/taskgroup.js",
  "readme": "\n<!-- TITLE/ -->\n\n# TaskGroup\n\n<!-- /TITLE -->\n\n\n<!-- BADGES/ -->\n\n[![Build Status](http://img.shields.io/travis-ci/bevry/taskgroup.png?branch=master)](http://travis-ci.org/bevry/taskgroup \"Check this project's build status on TravisCI\")\n[![NPM version](http://badge.fury.io/js/taskgroup.png)](https://npmjs.org/package/taskgroup \"View this project on NPM\")\n[![Gittip donate button](http://img.shields.io/gittip/bevry.png)](https://www.gittip.com/bevry/ \"Donate weekly to this project using Gittip\")\n[![Flattr donate button](http://img.shields.io/flattr/donate.png?color=yellow)](http://flattr.com/thing/344188/balupton-on-Flattr \"Donate monthly to this project using Flattr\")\n[![PayPayl donate button](http://img.shields.io/paypal/donate.png?color=yellow)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=QB8GQPZAH84N6 \"Donate once-off to this project using Paypal\")\n\n<!-- /BADGES -->\n\n\n<!-- DESCRIPTION/ -->\n\nGroup together synchronous and asynchronous tasks and execute them with support for concurrency, naming, and nesting.\n\n<!-- /DESCRIPTION -->\n\n\n<!-- INSTALL/ -->\n\n## Install\n\n### [Node](http://nodejs.org/), [Browserify](http://browserify.org/)\n- Use: `require('taskgroup')`\n- Install: `npm install --save taskgroup`\n\n### [Ender](http://ender.jit.su/)\n- Use: `require('taskgroup')`\n- Install: `ender add taskgroup`\n\n<!-- /INSTALL -->\n\n\n## Usage\n\n### Example\n\n``` javascript\n// Import\nvar TaskGroup = require('taskgroup').TaskGroup;\n\n// Create our new group\nvar group = new TaskGroup();\n\n// Define what should happen once the group has completed\ngroup.once('complete', function(err, results){\n\t// Log the error that has occured\n\tconsole.log(err);\n\t// => null\n\n\t// Log the results that our group received from the executing items\n\tconsole.log(JSON.stringify(results));\n\t/*\t=>\n\t\t[\n\t\t\t[null, 'first', 'task'],\n\t\t\t[null, 'second task'],\n\t\t\t[null, [\n\t\t\t\t[null, 'sub second task'],\n\t\t\t\t[null, 'sub first', 'task']\n\t\t\t]]\n\t\t]\n\t*/\n});\n\n// Add an asynchronous task that gives the result to the completion callback\ngroup.addTask(function(complete){\n\tsetTimeout(function(){\n\t\tcomplete(null, 'first', 'task');\n\t},500);\n});\n\n// Add a synchronous task that returns the result\n// Errors should be returned, though if an error is thrown we will catch it\ngroup.addTask(function(){\n\treturn 'second task';\n});\n\n// Add a sub-group to our exiting group\ngroup.addGroup(function(addGroup, addTask){\n\t// Tell this sub-group to execute in parallel (all at once) by setting its concurrency to unlimited\n\t// by default the concurrency for all groups is set to 1\n\t// which means that they execute in serial fashion (one after the other, instead of all at once)\n\tthis.setConfig({concurrency:0});\n\n\t// Add an asynchronous task that gives its result to the completion callback\n\taddTask(function(complete){\n\t\tsetTimeout(function(){\n\t\t\tcomplete(null, 'sub first', 'task');\n\t\t},500);\n\t});\n\n\t// Add a synchronous task that returns its result\n\taddTask(function(){\n\t\treturn 'sub second task';\n\t});\n});\n\n// Execute our group\ngroup.run();\n```\n\n### TaskGroup API\n\n``` javascript\nnew (require('taskgroup')).TaskGroup()\n```\n\n- Available methods:\n\t- `constructor(name?,fn?)` - create our new group, arguments can be a String for `name`, an Object for `config`, and a Function for `next`\n\t- `setConfig(config)` - set the configuration for the group, returns chain\n\t- `getconfig()` - return the set configuration\n\t- `addTask(args...)`, `addTasks(tasks, args..)`  - create a new task item with the arguments and adds it to the group, returns the new task item(s)\n\t- `addGroup(args...)`, `addGroups(groups, args..)` - create a new group item with the arguments and adds it to the group, returns the new group item(s)\n\t- `addItem(item)`, `addItem(items)`  - adds the items to the group, returns the item(s)\n\t- `getTotals()` - returns counts for the following `{running,remaining,completed,total}`\n\t- `clear()` - remove the remaining items to be executed\n\t- `pause()` - pause the execution of the items\n\t- `stop()` - clear and pause\n\t- `exit(err)` - stop and complete, `err` if specified is sent to the completion event when fired\n\t- `complete()` - will fire the completion event if we are already complete, useful if you're binding your listeners after run\n\t- `run()` - start/resume executing the items, returns chain\n\t- All those of [EventEmitter2](https://github.com/hij1nx/EventEmitter2)\n- Available configuration:\n\t- `name`, no default - allows us to assign a name to the group, useful for debugging\n\t- `method(addGroup, addTask, complete?)`, no default - allows us to use an inline and self-executing style for defining groups, useful for nesting\n\t- `concurrency`, defaults to `1` - how many items shall we allow to be run at the same time, set to `0` to allow unlimited\n\t- `pauseOnError`, defaults to `true` - if an error occurs in one of our items, should we stop executing any remaining items?\n\t\t- setting to `false` will continue with execution with the other items even if an item experiences an error\n\t- `items` - alias for  `.addTasks(items)`\n\t- `groups` - alias for  `.addGroups(groups)`\n\t- `tasks` - alias for  `.addTasks(tasks)`\n\t- `next` - alias for  `.once('complete', next)`\n- Available events:\n\t- `run()` - fired just before we execute the items\n\t- `complete(err, results)` - fired when all our items have completed\n\t- `task.run(task)` - fired just before a task item executes\n\t- `task.complete(task, err, args...)` - fired when a task item has completed\n\t- `group.run(group)` - fired just before a group item executes\n\t- `group.complete(group, err, results)` - fired when a group item has completed\n\t- `item.run(item)` - fired just before an item executes (fired for both sub-tasks and sub-groups)\n\t- `item.complete(item, err, args...)` - fired when an item has completed (fired for both sub-task and sub-groups)\n\n\n### Task API\n\n``` javascript\nnew (require('taskgroup')).Task()\n```\n\n- Available methods:\n\t- `constructor(args...)` - create our new task, arguments can be a String for `name`, an Object for `config`, and a Function for `next`\n\t- `setConfig(config)` - set the configuration for the group, returns chain\n\t- `getconfig()` - return the set configuration\n\t- `complete()` - will fire the completion event if we are already complete, useful if you're binding your listeners after run\n\t- `run()` - execute the task\n- Available configuration:\n\t- `name`, no default - allows us to assign a name to the group, useful for debugging\n\t- `method(complete?)`, no default - must be set at some point, it is the function to execute for the task, if it is asynchronous it should use the completion callback provided\n\t- `args`, no default - an array of arguments that you would like to precede the completion callback when executing `fn`\n\t- `next` - alias for  `.once('complete', next)`\n- Available events:\n\t- `run()` - fired just before we execute the task\n\t- `complete(err, args...)` - fired when the task has completed\n\n\n## Comparison with [Async.js](https://github.com/caolan/async)\n\nThe biggest advantage and difference of TaskGroup over async.js is that TaskGroup has one uniform API to rule them all, whereas with async.js I found that I was always having to keep referring to the async manual to try and figure out which is the right call for my use case then somehow wrap my head around the async.js way of doing things (which more often than not I couldn't), whereas with TaskGroup I never have that problem as it is one consistent API for all the different use cases.\n\nLet's take a look at what the most common async.js methods would look like in TaskGroup:\n\n``` javascript\n// ====================================\n// Series\n\n// Async\nasync.series([\n\tfunction(){},\n\tfunction(callback){callback();}\n], next);\n\n// TaskGroup\nnew TaskGroup({\n\ttasks: [\n\t\tfunction(){},\n\t\tfunction(callback){callback();}\n\t],\n\tnext: next\n}).run();\n\n\n// ====================================\n// Parallel\n\n// Async\nasync.parallel([\n\tfunction(){},\n\tfunction(callback){callback();}\n], next);\n\n// TaskGroup\nnew TaskGroup({\n\tconcurrency: 0,\n\ttasks: [\n\t\tfunction(){},\n\t\tfunction(callback){callback();}\n\t],\n\tnext: next\n}).run();\n\n// ====================================\n// Map\n\n// Async\nasync.map(['file1','file2','file3'], fs.stat, next);\n\n// TaskGroup\nnew TaskGroup({\n\tconcurrency: 0,\n\ttasks: ['file1', 'file2', 'file3'].map(function(file){\n\t\treturn function(complete){\n\t\t\tfs.stat(file, complete);\n\t\t}\n\t}),\n\tnext: next\n}).run();\n```\n\nAnother big advantage of TaskGroup over async.js is TaskGroup's ability to add tasks to the group once execution has already started - this is a common use case when creating an application that must perform it's actions serially, so using TaskGroup you can create a serial TaskGroup for the application, run it right away, then add the actions to the group as tasks.\n\nA final big advantage of TaskGroup over async.js is TaskGroup's ability to do nested groups, this allowed us to created the [Joe Testing Framework & Runner](https://github.com/bevry/joe) incredibly easily, and because of this functionality Joe will always know which test (task) is associated to which suite (task group), whereas test runners like mocha have to guess (they add the task to the last group, which may not always be the case! especially with dynamically created tests!).\n\n\n<!-- HISTORY/ -->\n\n## History\n[Discover the change history by heading on over to the `History.md` file.](https://github.com/bevry/taskgroup/blob/master/History.md#files)\n\n<!-- /HISTORY -->\n\n\n<!-- CONTRIBUTE/ -->\n\n## Contribute\n\n[Discover how you can contribute by heading on over to the `Contributing.md` file.](https://github.com/bevry/taskgroup/blob/master/Contributing.md#files)\n\n<!-- /CONTRIBUTE -->\n\n\n<!-- BACKERS/ -->\n\n## Backers\n\n### Maintainers\n\nThese amazing people are maintaining this project:\n\n- Benjamin Lupton <b@lupton.cc> (https://github.com/balupton)\n\n### Sponsors\n\nNo sponsors yet! Will you be the first?\n\n[![Gittip donate button](http://img.shields.io/gittip/bevry.png)](https://www.gittip.com/bevry/ \"Donate weekly to this project using Gittip\")\n[![Flattr donate button](http://img.shields.io/flattr/donate.png?color=yellow)](http://flattr.com/thing/344188/balupton-on-Flattr \"Donate monthly to this project using Flattr\")\n[![PayPayl donate button](http://img.shields.io/paypal/donate.png?color=yellow)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=QB8GQPZAH84N6 \"Donate once-off to this project using Paypal\")\n\n### Contributors\n\nThese amazing people have contributed code to this project:\n\n- Benjamin Lupton <b@lupton.cc> (https://github.com/balupton) - [view contributions](https://github.com/bevry/taskgroup/commits?author=balupton)\n- sfrdmn (https://github.com/sfrdmn) - [view contributions](https://github.com/bevry/taskgroup/commits?author=sfrdmn)\n\n[Become a contributor!](https://github.com/bevry/taskgroup/blob/master/Contributing.md#files)\n\n<!-- /BACKERS -->\n\n\n<!-- LICENSE/ -->\n\n## License\n\nLicensed under the incredibly [permissive](http://en.wikipedia.org/wiki/Permissive_free_software_licence) [MIT license](http://creativecommons.org/licenses/MIT/)\n\nCopyright &copy; 2013+ Bevry Pty Ltd <us@bevry.me> (http://bevry.me)\n<br/>Copyright &copy; 2011-2012 Benjamin Lupton <b@lupton.cc> (http://balupton.com)\n\n<!-- /LICENSE -->\n\n\n",
  "readmeFilename": "README.md",
  "_id": "taskgroup@3.3.1",
  "_from": "taskgroup@~3.3.1"
}
