// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  module.exports = function(BasePlugin) {
    var ServicesPlugin, _ref;
    return ServicesPlugin = (function(_super) {
      __extends(ServicesPlugin, _super);

      function ServicesPlugin() {
        _ref = ServicesPlugin.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ServicesPlugin.prototype.name = 'services';

      ServicesPlugin.prototype.templateData = {
        getPageUrl: function() {
          var pageUrl;
          pageUrl = (this.site.url || '') + this.document.url.replace(/\/index.html$/, '').replace(/\/$/, '');
          pageUrl || (pageUrl = '/');
          return pageUrl;
        },
        getServices: function() {
          var services, _ref1;
          services = ((_ref1 = this.site) != null ? _ref1.services : void 0) || {};
          return services;
        },
        getServiceButtons: function(services) {
          var result;
          if (services == null) {
            services = this.getServices();
          }
          result = this.getSocialButtons(services) + this.getServiceBadges(services);
          return "<div class=\"service-buttons\">" + result + "</div>";
        },
        getSocialButtons: function(services) {
          var button, buttonAdjusted, buttons, fn, fnName, result, _i, _len;
          if (services == null) {
            services = this.getServices();
          }
          buttons = services.buttons || ['GooglePlusOne', 'RedditSubmit', 'HackerNewsSubmit', 'FacebookLike', 'FacebookFollow', 'TwitterTweet', 'TwitterFollow', 'GithubFollow', 'GithubStar', 'QuoraFollow'];
          result = '';
          for (_i = 0, _len = buttons.length; _i < _len; _i++) {
            button = buttons[_i];
            buttonAdjusted = button[0].toUpperCase() + button.slice(1);
            fnName = 'get' + buttonAdjusted + 'Button';
            fn = this[fnName];
            if (fn != null) {
              result += fn.call(this, services);
            } else {
              result += button;
            }
          }
          return "<div class=\"social-buttons\">" + result + "</div>";
        },
        getServiceBadges: function(services) {
          var button, buttonAdjusted, buttons, fn, result, _i, _len;
          if (services == null) {
            services = this.getServices();
          }
          buttons = services.buttons || ['TravisStatus', 'Fury', 'Gittip', 'Flattr', 'Paypal'];
          result = '';
          for (_i = 0, _len = buttons.length; _i < _len; _i++) {
            button = buttons[_i];
            buttonAdjusted = button[0].toUpperCase() + button.slice(1);
            fn = this['get' + buttonAdjusted + 'Button'];
            if (fn != null) {
              result += fn.call(this, services);
            } else {
              result += button;
            }
          }
          return "<div class=\"service-badges\">" + result + "</div>";
        },
        getTravisStatusButton: function(services) {
          var code;
          if (services == null) {
            services = this.getServices();
          }
          code = services.travisStatusButton;
          if (!code) {
            return '';
          }
          return "<div class=\"travis-status-button service-button\">\n	<a href=\"http://travis-ci.org/bevry/docpad\" title=\"Check this project's build status on TravisCI\">\n		<img alt=\"Build status\" src=\"//img.shields.io/travis-ci/" + code + ".png?branch=master\" />\n	</a>\n</div>";
        },
        getFuryButton: function(services) {
          var code;
          if (services == null) {
            services = this.getServices();
          }
          code = services.furyButton;
          if (!code) {
            return '';
          }
          return "<div class=\"fury-button service-button\">\n	<a href=\"https://npmjs.org/package/" + code + "\" title=\"View this project on NPM\">\n		<img alt=\"Package version\" src=\"//badge.fury.io/js/" + code + ".png\" />\n	</a>\n</div>";
        },
        getGittipButton: function(services) {
          var code;
          if (services == null) {
            services = this.getServices();
          }
          code = services.gittipButton;
          if (!code) {
            return '';
          }
          return "<div class=\"gittip-button service-button\">\n	<a href=\"https://www.gittip.com/" + code + "/\" title=\"Donate weekly to this project using Gittip\">\n		<img alt=\"Gittip donate button\" src=\"//img.shields.io/gittip/" + code + ".png\" />\n	</a>\n</div>";
        },
        getFlattrButton: function(services) {
          var code;
          if (services == null) {
            services = this.getServices();
          }
          code = services.flattrButton;
          if (!code) {
            return '';
          }
          return "<div class=\"flattr-button service-button\">\n	<a href=\"http://flattr.com/thing/" + code + "\" title=\"Donate monthly to this project using Flattr\">\n		<img alt=\"Flattr donate button\" src=\"//img.shields.io/flattr/donate.png?color=yellow\" />\n	</a>\n</div>";
        },
        getPaypalButton: function(services) {
          var code;
          if (services == null) {
            services = this.getServices();
          }
          code = services.paypalButton;
          if (!code) {
            return '';
          }
          return "<div class=\"paypal-button service-button\">\n	<a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=" + code + "\" title=\"Donate once-off to this project using Paypal\">\n		<img alt=\"Paypal donate button\" src=\"//img.shields.io/paypal/donate.png?color=yellow\" />\n	</a>\n</div>";
        },
        getGooglePlusOneButton: function(services) {
          var pageUrl;
          if (services == null) {
            services = this.getServices();
          }
          if (services.googlePlusOneButton === false) {
            return '';
          }
          pageUrl = this.getPageUrl();
          return "<div class=\"google-plus-one-button service-button\">\n	<div class=\"g-plusone\" data-size=\"medium\" data-href=\"" + (escape(pageUrl)) + "\"></div>\n	<script>\n		(function() {\n			var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;\n			po.src = 'https://apis.google.com/js/plusone.js';\n			var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);\n		})();\n	</script>\n</div>";
        },
        getRedditSubmitButton: function(services) {
          var pageUrl;
          if (services == null) {
            services = this.getServices();
          }
          if (services.redditSubmitButton === false) {
            return '';
          }
          pageUrl = this.getPageUrl();
          return "<div class=\"reddit-submit-button service-button\">\n	<script type=\"text/javascript\" src=\"http://en.reddit.com/static/button/button1.js\"></script>\n</div>";
        },
        getHackerNewsSubmitButton: function(services) {
          var pageUrl;
          if (services == null) {
            services = this.getServices();
          }
          if (services.hackerNewsSubmitButton === false) {
            return '';
          }
          pageUrl = this.getPageUrl();
          return "<div class=\"hacker-news-submit-button service-button\">\n	<a href=\"http://news.ycombinator.com/submit\" class=\"hn-share-button\" data-url=\"" + pageUrl + "\">Vote on HN</a>\n	<script>\n		(function(d, t) {\n			var g = d.createElement(t),\n				s = d.getElementsByTagName(t)[0];\n				g.src = '//hnbutton.appspot.com/static/hn.min.js';\n			s.parentNode.insertBefore(g, s);\n		}(document, 'script'));\n	</script>\n</div>";
        },
        getFacebookLikeButton: function(services) {
          var facebookApplicationId, pageUrl, _ref1, _ref2;
          if (services == null) {
            services = this.getServices();
          }
          facebookApplicationId = (_ref1 = (_ref2 = services.facebookLikeButton) != null ? _ref2.applicationId : void 0) != null ? _ref1 : '266367676718271';
          if (!facebookApplicationId) {
            return '';
          }
          pageUrl = this.getPageUrl();
          return "<div class=\"facebook-like-button service-button\">\n	<iframe src=\"//www.facebook.com/plugins/like.php?href=" + (escape(pageUrl)) + "&amp;send=false&amp;layout=button_count&amp;width=450&amp;show_faces=false&amp;font&amp;colorscheme=light&amp;action=like&amp;height=21&amp;appId=" + (escape(facebookApplicationId)) + "\" scrolling=\"no\" frameborder=\"0\" style=\"border:none; overflow:hidden; width:450px; height:21px;\" allowTransparency=\"true\"></iframe>\n</div>";
        },
        getFacebookFollowButton: function(services) {
          var facebookApplicationId, facebookUsername, _ref1, _ref2, _ref3;
          if (services == null) {
            services = this.getServices();
          }
          facebookApplicationId = (_ref1 = (_ref2 = services.facebookFollowButton) != null ? _ref2.applicationId : void 0) != null ? _ref1 : '266367676718271';
          facebookUsername = (_ref3 = services.facebookFollowButton) != null ? _ref3.username : void 0;
          if (!(facebookUsername && facebookApplicationId)) {
            return '';
          }
          return "<div class=\"facebook-follow-button service-button\">\n	<iframe src=\"//www.facebook.com/plugins/follow.php?href=https%3A%2F%2Fwww.facebook.com%2F" + (escape(facebookUsername)) + "&amp;layout=button_count&amp;show_faces=false&amp;colorscheme=light&amp;font&amp;width=450&amp;appId=" + (escape(facebookApplicationId)) + "\" scrolling=\"no\" frameborder=\"0\" style=\"border:none; overflow:hidden; width:450px; height: 20px;\" allowTransparency=\"true\"></iframe>\n</div>";
        },
        getTwitterTweetButton: function(services) {
          var twitterUsername;
          if (services == null) {
            services = this.getServices();
          }
          twitterUsername = services.twitterTweetButton;
          if (!twitterUsername) {
            return '';
          }
          return "<div class=\"twitter-tweet-button service-button\">\n	<a href=\"https://twitter.com/share\" class=\"twitter-share-button\" data-via=\"" + twitterUsername + "\" data-related=\"" + twitterUsername + "\">Tweet</a>\n	<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=\"//platform.twitter.com/widgets.js\";fjs.parentNode.insertBefore(js,fjs);}}(document,\"script\",\"twitter-wjs\");</script>\n</div>";
        },
        getTwitterFollowButton: function(services) {
          var twitterUsername;
          if (services == null) {
            services = this.getServices();
          }
          twitterUsername = services.twitterFollowButton;
          if (!twitterUsername) {
            return '';
          }
          return "<div class=\"twitter-follow-button service-button\">\n	<a href=\"https://twitter.com/" + twitterUsername + "\" class=\"twitter-follow-button\" data-show-count=\"false\">Follow @" + twitterUsername + "</a>\n	<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=\"//platform.twitter.com/widgets.js\";fjs.parentNode.insertBefore(js,fjs);}}(document,\"script\",\"twitter-wjs\");</script>\n</div>";
        },
        getGithubFollowButton: function(services) {
          var githubUsername;
          if (services == null) {
            services = this.getServices();
          }
          githubUsername = services.githubFollowButton;
          if (!githubUsername) {
            return '';
          }
          return "<div class=\"github-follow-button service-button\">\n	<iframe src=\"//ghbtns.com/github-btn.html?user=" + githubUsername + "&amp;type=follow&amp;count=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"0\" width=\"165\" height=\"20\"></iframe>\n</div>";
        },
        getGithubStarButton: function(services) {
          var githubRepo, githubUsername, parts, _ref1;
          if (services == null) {
            services = this.getServices();
          }
          parts = (_ref1 = services.githubStarButton) != null ? _ref1.split('/') : void 0;
          if (!((parts != null ? parts.length : void 0) === 2 && parts[0] && parts[1])) {
            return '';
          }
          githubUsername = parts[0];
          githubRepo = parts[1];
          return "<div class=\"github-star-button service-button\">\n	<iframe src=\"//ghbtns.com/github-btn.html?user=" + githubUsername + "&amp;repo=" + githubRepo + "&amp;type=watch&amp;count=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"0\" width=\"110\" height=\"20\"></iframe>\n</div>";
        },
        getQuoraFollowButton: function(services) {
          var quoraCode, quoraRealname, quoraUsername, _ref1;
          if (services == null) {
            services = this.getServices();
          }
          quoraUsername = (_ref1 = services.quoraFollowButton) != null ? _ref1 : '';
          if (!quoraUsername) {
            return '';
          }
          quoraRealname = quoraUsername.replace(/-/g, ' ');
          quoraCode = '7N31XJs';
          return "<div class=\"quora-follow-button service-button\">\n	<span class=\"quora-follow-button\" data-name=\"" + quoraUsername + "\">\n		Follow <a href=\"http://www.quora.com/" + quoraUsername + "\">" + quoraRealname + "</a> on <a href=\"http://www.quora.com\">Quora</a>\n		<script type=\"text/javascript\" src=\"//www.quora.com/widgets/follow?embed_code=" + quoraCode + "\"></script>\n	</span>\n</div>";
        },
        getDisqus: function(services) {
          var disqusDeveloper, disqusIdentifier, disqusShortname, disqusTitle, pageUrl;
          if (services == null) {
            services = this.getServices();
          }
          disqusShortname = services.disqus;
          if (!disqusShortname) {
            return '';
          }
          disqusDeveloper = __indexOf.call(this.getEnvironments(), 'production') >= 0 ? '0' : '1';
          pageUrl = this.getPageUrl();
          disqusIdentifier = this.document.slug;
          disqusTitle = this.document.title || this.document.name;
          return "<div id=\"disqus_thread\"></div>\n<script>\n	(function(){\n		window.disqus_shortname = '" + disqusShortname + "';\n		window.disqus_developer = '" + disqusDeveloper + "';\n		window.disqus_url = '" + pageUrl + "';\n		window.disqus_identifier = '" + disqusIdentifier + "';\n		window.disqus_title = '" + disqusTitle + "';\n		if ( window.DISQUS ) {\n			return DISQUS.reset({\n				reload: true,\n				config: function () {\n					this.page.identifier = window.disqus_identifier;\n					this.page.url = window.disqus_url;\n					this.page.title = window.disqus_title;\n				}\n			});\n		}\n		else {\n		  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;\n		  dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';\n		  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\n		}\n	})();\n</script>\n<noscript>Please enable JavaScript to view the <a href=\"http://disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>\n<a href=\"http://disqus.com\" class=\"dsq-brlink\">comments powered by <span class=\"logo-disqus\">Disqus</span></a>";
        },
        getGauges: function(services) {
          var gaugesSiteId;
          if (services == null) {
            services = this.getServices();
          }
          gaugesSiteId = services.gauges;
          if (!gaugesSiteId) {
            return '';
          }
          return "var _gauges = _gauges || [];\n(function(){\n	var t = document.createElement('script');\n	t.type = 'text/javascript';\n	t.async = true;\n	t.id = 'gauges-tracker';\n	t.setAttribute('data-site-id', '" + gaugesSiteId + "');\n	t.src = '//secure.gaug.es/track.js';\n	var s = document.getElementsByTagName('script')[0];\n	s.parentNode.insertBefore(t, s);\n})();";
        },
        getGoogleAnalytics: function(services) {
          var googleAccountId;
          if (services == null) {
            services = this.getServices();
          }
          googleAccountId = services.googleAnalytics;
          if (!googleAccountId) {
            return '';
          }
          return "var _gaq = _gaq || [];\n_gaq.push(['_setAccount', '" + googleAccountId + "']);\n_gaq.push(['_trackPageview']);\n(function(){\n	var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n	ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n	var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n})();";
        },
        getMixpanel: function(services) {
          var mixpanelId;
          if (services == null) {
            services = this.getServices();
          }
          mixpanelId = services.mixpanel;
          if (!mixpanelId) {
            return '';
          }
          return "(function(c,a){window.mixpanel=a;var b,d,h,e;b=c.createElement(\"script\");b.type=\"text/javascript\";b.async=!0;b.src=(\"https:\"===c.location.protocol?\"https:\":\"http:\")+'//cdn.mxpnl.com/libs/mixpanel-2.2.min.js';d=c.getElementsByTagName(\"script\")[0];d.parentNode.insertBefore(b,d);a._i=[];a.init=function(b,c,f){function d(a,b){var c=b.split(\".\");2==c.length&&(a=a[c[0]],b=c[1]);a[b]=function(){a.push([b].concat(Array.prototype.slice.call(arguments,0)))}}var g=a;\"undefined\"!==typeof f?g=a[f]=[]:f=\"mixpanel\";g.people=g.people||[];h=['disable','track','track_pageview','track_links','track_forms','register','register_once','unregister','identify','alias','name_tag','set_config','people.set','people.increment'];for(e=0;e<h.length;e++)d(g,h[e]);a._i.push([b,c,f])};a.__SV=1.2;})(document,window.mixpanel||[]);mixpanel.init(\"" + mixpanelId + "\");";
        },
        getReinvigorate: function(services) {
          var reinvigorateId;
          if (services == null) {
            services = this.getServices();
          }
          reinvigorateId = services.reinvigorate;
          if (!reinvigorateId) {
            return '';
          }
          return "(function(){\n	var t = document.createElement('script');\n	t.type = 'text/javascript';\n	t.async = true;\n	t.src = '//include.reinvigorate.net/re_.js';\n	t.onload = function(){\n		reinvigorate.track(\"" + reinvigorateId + "\");\n	};\n	var s = document.getElementsByTagName('script')[0];\n	s.parentNode.insertBefore(t,s);\n})();";
        },
        getZopim: function(services) {
          var zopimId;
          if (services == null) {
            services = this.getServices();
          }
          zopimId = services.zopim;
          if (!zopimId) {
            return '';
          }
          return "window.$zopim||(function(d,s){var z=$zopim=function(c){z._.push(c)},$=z.s=d.createElement(s),e=d.getElementsByTagName(s)[0];z.set=function(o){z.set._.push(o)};z._=[];z.set._=[];$.async=!0;$.setAttribute('charset','utf-8');$.src='//cdn.zopim.com/?" + zopimId + "';z.t=+new Date;$.type='text/javascript';e.parentNode.insertBefore($,e)})(document,'script');";
        },
        getInspectlet: function(services) {
          var inspectletId;
          if (services == null) {
            services = this.getServices();
          }
          inspectletId = services.inspectlet;
          if (!inspectletId) {
            return '';
          }
          return "<!-- Begin Inspectlet Embed Code -->\n<script id=\"inspectletjs\">\n	window.__insp = window.__insp || [];\n	__insp.push(['wid', " + inspectletId + "]);\n	(function() {\n		function __ldinsp(){var insp = document.createElement('script'); insp.type = 'text/javascript'; insp.async = true; insp.id = \"inspsync\"; insp.src = ('https:' == document.location.protocol ? 'https' : 'http') + '://www.inspectlet.com/inspectlet.js'; var x = document.getElementsByTagName('script')[0]; x.parentNode.insertBefore(insp, x); }\n		if (window.attachEvent){\n			window.attachEvent('onload', __ldinsp);\n		}else{\n			window.addEventListener('load', __ldinsp, false);\n		}\n	})();\n</script>\n<!-- End Inspectlet Embed Code -->";
        }
      };

      ServicesPlugin.prototype.extendTemplateData = function(opts) {
        var templateData, templateHelper, templateHelperName, _ref1;
        templateData = opts.templateData;
        _ref1 = this.templateData;
        for (templateHelperName in _ref1) {
          if (!__hasProp.call(_ref1, templateHelperName)) continue;
          templateHelper = _ref1[templateHelperName];
          templateData[templateHelperName] = templateHelper;
        }
        return this;
      };

      ServicesPlugin.prototype.populateCollections = function(opts) {
        var config, docpad, scripts, scriptsBlock, serviceScript, serviceScriptContent, serviceScripts, templateData, _i, _len;
        docpad = this.docpad;
        config = this.config;
        templateData = docpad.getTemplateData();
        scriptsBlock = docpad.getBlock('scripts');
        scripts = [];
        serviceScripts = ['Gauges', 'GoogleAnalytics', 'Mixpanel', 'Reinvigorate', 'Zopim', 'Inspectlet'];
        for (_i = 0, _len = serviceScripts.length; _i < _len; _i++) {
          serviceScript = serviceScripts[_i];
          serviceScriptContent = templateData['get' + serviceScript].call(templateData);
          if (serviceScriptContent) {
            scripts.push(serviceScriptContent);
          }
        }
        scriptsBlock.add(scripts, {
          defer: false
        });
        return this;
      };

      return ServicesPlugin;

    })(BasePlugin);
  };

}).call(this);
