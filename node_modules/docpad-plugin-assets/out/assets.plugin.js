// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module.exports = function(BasePlugin) {
  var AssetsPlugin, balUtil, fs, pathUtil;
  pathUtil = require('path');
  fs = require('fs');
  balUtil = require('bal-util');
  return AssetsPlugin = (function(_super) {
    __extends(AssetsPlugin, _super);

    AssetsPlugin.prototype.name = 'assets';

    AssetsPlugin.prototype.config = {
      retainPath: 'yes',
      retainName: 'no'
    };

    AssetsPlugin.prototype.assetLocations = null;

    function AssetsPlugin() {
      AssetsPlugin.__super__.constructor.apply(this, arguments);
      this.assetLocations = {};
    }

    AssetsPlugin.prototype.renderBefore = function(_arg, next) {
      var config, me, templateData;
      templateData = _arg.templateData;
      me = this;
      config = this.config;
      docpad.log('debug', 'in renderBefore');
      templateData.asset = function(name) {
        var crypto, f, hash, outBasename, outDirPath, outFilename, outPath, relativeOutBase, relativeOutDirPath, relativeOutPath, shasum, srcPath;
        docpad.log('debug', "Working through file " + name);
        f = this.getFileAtPath(name);
        if (f) {
          srcPath = f.attributes.fullPath;
          if (!(f.attributes.fullPath in me.assetLocations)) {
            docpad.log('debug', 'First time seen, creating hash');
            docpad.log('debug', "Source path is " + srcPath);
            docpad.log('debug', "Out path is " + f.attributes.outDirPath);
            crypto = require('crypto');
            shasum = crypto.createHash('sha1');
            shasum.update(f.attributes.source);
            hash = shasum.digest('hex');
            docpad.log('debug', "Hash is " + hash);
            if (config.retainPath === 'yes') {
              relativeOutDirPath = f.attributes.relativeOutDirPath;
            } else {
              relativeOutDirPath = '';
            }
            docpad.log('debug', "relativeOutDirPath is " + relativeOutDirPath);
            if (config.retainName === 'yes') {
              outBasename = "" + f.attributes.basename + "-" + hash;
            } else {
              outBasename = hash;
            }
            docpad.log('debug', "outBasename is " + outBasename);
            if (relativeOutDirPath === '') {
              relativeOutBase = outBasename;
            } else {
              relativeOutBase = "" + relativeOutDirPath + pathUtil.sep + outBasename;
            }
            docpad.log('debug', "relativeOutBase is " + relativeOutBase);
            outFilename = "" + outBasename + "." + f.attributes.outExtension;
            docpad.log('debug', "outFilename is " + outFilename);
            relativeOutPath = "" + relativeOutBase + "." + f.attributes.outExtension;
            docpad.log('debug', "relativeOutPath is " + relativeOutPath);
            if (relativeOutDirPath === '') {
              outDirPath = docpad.config.outPath;
            } else {
              outDirPath = "" + docpad.config.outPath + pathUtil.sep + relativeOutDirPath;
            }
            docpad.log('debug', "outDirPath is " + outDirPath);
            outPath = "" + outDirPath + pathUtil.sep + outFilename;
            docpad.log('debug', "outPath is " + outPath);
            me.assetLocations[srcPath] = {
              relativeOutDirPath: relativeOutDirPath,
              outBasename: outBasename,
              relativeOutBase: relativeOutBase,
              outFilename: outFilename,
              relativeOutPath: relativeOutPath,
              outDirPath: outDirPath,
              outPath: outPath
            };
          }
          docpad.log('debug', "Returning " + pathUtil.sep + me.assetLocations[srcPath].relativeOutPath);
          return "" + pathUtil.sep + me.assetLocations[srcPath].relativeOutPath;
        } else {
          debug.log('debug', "Asset " + name + " not found; ignoring");
          return name;
        }
      };
      next();
      return this;
    };

    AssetsPlugin.prototype.writeBefore = function(_arg, next) {
      var collection, me, templateData;
      collection = _arg.collection, templateData = _arg.templateData;
      me = this;
      collection.forEach(function(document) {
        var srcPath;
        srcPath = document.attributes.fullPath;
        if (srcPath in me.assetLocations) {
          docpad.log('debug', "Changing output path of " + srcPath);
          document.attributes.relativeOutDirPath = me.assetLocations[srcPath].relativeOutDirPath;
          document.attributes.outBasename = me.assetLocations[srcPath].outBasename;
          document.attributes.relativeOutBase = me.assetLocations[srcPath].relativeOutBase;
          document.attributes.outFilename = me.assetLocations[srcPath].outFilename;
          document.attributes.relativeOutPath = me.assetLocations[srcPath].relativeOutPath;
          document.attributes.outDirPath = me.assetLocations[srcPath].outDirPath;
          return document.attributes.outPath = me.assetLocations[srcPath].outPath;
        }
      });
      next();
      return this;
    };

    AssetsPlugin.prototype.generateAfter = function() {
      return this.assetLocations = {};
    };

    return AssetsPlugin;

  })(BasePlugin);
};
