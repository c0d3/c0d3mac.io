// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module.exports = function(BasePlugin) {
  var StylPlugin, _ref;
  return StylPlugin = (function(_super) {
    __extends(StylPlugin, _super);

    function StylPlugin() {
      _ref = StylPlugin.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    StylPlugin.prototype.name = 'styl';

    StylPlugin.prototype.config = {
      compileOptions: {
        whitespace: true,
        compress: true
      },
      environments: {
        development: {
          compileOptions: {
            compress: false
          }
        }
      }
    };

    StylPlugin.prototype.render = function(opts) {
      var compileOptions, content, file, inExtension, key, outExtension, styl, value, _ref1;
      inExtension = opts.inExtension, outExtension = opts.outExtension, content = opts.content, file = opts.file;
      if ((inExtension === 'styl') && (outExtension === 'css' || outExtension === null)) {
        styl = require('styl');
        compileOptions = {
          filename: file.get('fullPath')
        };
        _ref1 = this.getConfig().compileOptions;
        for (key in _ref1) {
          if (!__hasProp.call(_ref1, key)) continue;
          value = _ref1[key];
          if (compileOptions[key] == null) {
            compileOptions[key] = value;
          }
        }
        if (compileOptions.whitespace === true) {
          opts.content = opts.content.replace(/\t/g, '  ');
        }
        opts.content = styl(opts.content, compileOptions).toString();
      }
    };

    return StylPlugin;

  })(BasePlugin);
};
