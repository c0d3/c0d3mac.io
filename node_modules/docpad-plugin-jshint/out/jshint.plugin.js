// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module.exports = function(BasePlugin) {
  var JSHintPlugin, colors, fs, jshint, merge, _ref;
  jshint = require('jshint').JSHINT;
  colors = require('colors');
  merge = require('merge');
  fs = require('fs');
  return JSHintPlugin = (function(_super) {
    __extends(JSHintPlugin, _super);

    function JSHintPlugin() {
      _ref = JSHintPlugin.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    JSHintPlugin.prototype.name = 'jshint';

    JSHintPlugin.prototype.config = {
      ignorePaths: [],
      ignoreFiles: [],
      ignoreMinified: true,
      globals: {},
      hintOptions: {}
    };

    JSHintPlugin.prototype.docpadReady = function() {
      return fs.readFile(process.cwd() + '/.jshintrc', function(err, data) {
        var config, jshintrc;
        if (err) {

        } else {
          config = this.docpad.loadedPlugins.jshint.config;
          jshintrc = JSON.parse(data);
          config.hintOptions = merge(config.hintOptions, jshintrc);
          this.docpad.loadedPlugins.jshint.config = config;
          if (config.hintOptions.globals) {
            config.globals = merge(config.globals, config.hintOptions.globals);
            return delete config.hintOptions.globals;
          }
        }
      });
    };

    JSHintPlugin.prototype.renderAfter = function(_arg) {
      var collection, config, ignoredPaths, maxErrors,
        _this = this;
      collection = _arg.collection;
      if (docpad.getEnvironment() === 'development') {
        config = this.config;
        ignoredPaths = [];
        if (config.hintOptions.maxerr) {
          maxErrors = config.hintOptions.maxerr;
        } else {
          maxErrors = 50;
        }
        config.ignorePaths.map(function(path, i) {
          path = path.toString();
          if (path.charAt(0) === '/') {
            path.slice(1);
          }
          if (path.charAt(path.length - 1) !== '/') {
            path = path + '/';
          }
          return ignoredPaths.push(path);
        });
        return collection.each(function(item) {
          var err, file, fileName, message, path, ref, tooManyErrors, _i, _j, _k, _len, _len1, _len2, _ref1, _ref2;
          file = item.attributes;
          tooManyErrors = false;
          if (file.extension === 'js') {
            for (_i = 0, _len = ignoredPaths.length; _i < _len; _i++) {
              path = ignoredPaths[_i];
              if (file.relativePath.indexOf(path) === 0) {
                return;
              }
            }
            _ref1 = config.ignoreFiles;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              fileName = _ref1[_j];
              if (file.relativePath === fileName) {
                return;
              }
            }
            if (config.ignoreMinified) {
              if (file.relativePath.indexOf('.min.js') !== -1) {
                return;
              }
            }
            if (jshint(file.source, config.hintOptions, config.globals) === true) {

            } else {
              console.log('JSHint - '.white + file.relativePath.red);
              if (jshint.errors.length > maxErrors) {
                tooManyErrors = true;
                while (jshint.errors.length > maxErrors) {
                  jshint.errors.pop();
                }
              }
              _ref2 = jshint.errors;
              for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                err = _ref2[_k];
                ref = 'line ' + err.line + ', char ' + err.character;
                message = err.reason;
                console.log(ref.blue + ' - '.white + message);
              }
              if (tooManyErrors) {
                console.log('Too many errors.'.underline.yellow);
              }
              return console.log('\n');
            }
          }
        });
      }
    };

    return JSHintPlugin;

  })(BasePlugin);
};
