{
  "name": "docpad-plugin-thumbnails",
  "version": "2.1.0",
  "description": "DocPad plugin to generate thumbnails from your associated image files",
  "homepage": "https://github.com/rantecki/docpad-plugin-thumbnails",
  "keywords": [
    "docpad",
    "docpad-plugin",
    "image",
    "resize",
    "thumbnail"
  ],
  "author": {
    "name": "Richard Antecki",
    "email": "richard@antecki.id.au",
    "url": "richard.antecki.id.au"
  },
  "maintainers": [
    {
      "name": "Richard Antecki",
      "email": "richard@antecki.id.au",
      "url": "richard.antecki.id.au"
    }
  ],
  "contributors": [
    {
      "name": "Richard Antecki",
      "email": "richard@antecki.id.au",
      "url": "richard.antecki.id.au"
    },
    {
      "name": "Jon Baker",
      "url": "https://github.com/miletbaker"
    }
  ],
  "bugs": {
    "url": "https://github.com/rantecki/docpad-plugin-thumbnails/issues"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/rantecki/docpad-plugin-thumbnails.git"
  },
  "engines": {
    "node": ">=0.4",
    "docpad": ">=6.1 <7"
  },
  "dependencies": {
    "bal-util": "~1.16.10",
    "gm": "~1.8.1"
  },
  "devDependencies": {
    "coffee-script": "~1.4.0"
  },
  "main": "./out/thumbnails.plugin.js",
  "scripts": {
    "test": "node ./test/thumbnails.test.js",
    "prepublish": "cake compile"
  },
  "readme": "# Thumbnails Plugin for DocPad\nAdds support for thumbnail generation to [DocPad](https://docpad.org) using the [gm](http://aheckmann.github.com/gm/) library.\n\n\n## Install\n\nInstall either [GraphicsMagick](http://www.graphicsmagick.org/) or [ImageMagick](http://www.imagemagick.org/), and then:\n\n```\nnpm install --save docpad-plugin-thumbnails\n```\n\n### ImageMagick\n\nTo specify the use of ImageMagick, rather than GraphicsMagick, you need to add the following configuration setting in your docpad configuration:\n\n```\nplugins:\n\tthumbnails:\n\t\timageMagick: true\n```\n\n## Usage\n\n### Basic Usage\n\nUse the `@getThumbnail(path, [options...])` function in your templates.\n\n`path` is the path of your image file, relative to the `files` directory.\n\n`options...` are optional parameters, discussed below.\n\nThe `@getThumbnail()` call will return the url to the thumbnail image.\n\n### Basic Example\n\nWe could create the document `mydocument.html.eco` containing the following:\n\n```\n<img src=\"<%= @getThumbnail(\"images/image1.jpg\", { w: 100, h: 100 }) %>\"  alt=\"my image\">\n```\n\nWhere `image1.jpg` is in the `src/files/images/` directory.\n\nThis will run the default resize operation which will fit the image into the given maximum boundaries, in this case 100x100 pixels.\n\nOn site generation, the file `out/images/image1.thumb_default_w100h100q85.jpg` will be created.  It will also be updated whenever the source image `src/files/images/image1.jpg` changes.\n\n### AssociatedFiles Example\n\nThe Thumbnails plugin works well with the [AssociatedFiles](http://docpad.org/plugin/associatedfiles) plugin.  The example below (this time in *coffeekup*) will display 100x100 thumbnails of all images associated with the document using the AssociatedFiles plugin, with a link to the full-size image:\n\n```\nimage_exts = ['jpg', 'JPG', 'jpeg', 'JPEG', 'png', 'PNG']\nimages = @getDocument().getAssociatedFiles().findAll({extension: $in: image_exts}).toJSON()\nfor image in images\n\ta href: image.url, -> img src: @getThumbnail(image.url, w: 100, h: 100), alt: image.name\n```\n\n## Configuration\n\n### Options\n\nThe optional arguments to `@getThumbnail` can be one or more of the following:\n\n- an object containing parameters to pass to the target.\n- a string to specify a preset\n- a string to specify a target\n\n### Image Parameters\n\nThere are 3 different image parameters you can specify:\n\n- *w* for the width of the image\n- *h* for the height of the image\n- *q* for the JPEG quality setting\n\nParameters can be set using the object form shown in the examples above, or via presets, discussed below.\n\n### Presets\n\nPresets are basically aliases for a set of image parameters that you can define in your docpad configuration.  Using presets can be more convenient than specifying parameters for each image individually, and helps your site stay consistent.  For example, in your `docpad.coffee` file you might define the following:\n\n```\nplugins:\n\tthumbnails:\n\t\tpresets:\n\t\t\t'default':\n\t\t\t\tw: 200\n\t\t\t\th: 200\n\t\t\t\tq: 90\n\t\t\t'small':\n\t\t\t\tw: 100\n\t\t\t\th: 100\n\t\t\t'medium':\n\t\t\t\tw: 300\n\t\t\t\th: 300\n\t\t\t'large':\n\t\t\t\tw: 500\n\t\t\t\th: 500\n```\n\nIf no parameters (or preset names) are passed to the `@getThumbnail()` function, then the `default` parameters will be used.  Given the above configuration, the example below will resize the image to 200x200 at 90% quality.\n\n```\n<img src=\"<%= @getThumbnail(\"images/image1.jpg\") %>\"  alt=\"my image\">\n```\n\nYou can pass multiple parameters to the `@getThumbnails()` call, and they will be applied from left to right.  For example, you could use the default height and quality parameters and just override the width as follows:\n\n```\n<img src=\"<%= @getThumbnail(\"images/image1.jpg\", { w: 250 }) %>\"  alt=\"my image\">\n```\n\nYou can also mix presets with inline parameters, such as:\n\n```\n<img src=\"<%= @getThumbnail(\"images/image1.jpg\", { q: 80 }, 'medium', { h: 50 }) %>\"  alt=\"my image\">\n```\n\nThe right-most parameters will take precedence over those specified earlier.  So the above example uses `w: 300`, `h: 50`, and `q: 80`.\n\nThere are a whole bunch of default presets defined in the plugin, but you will probably want to define your own instead.\n\n### Targets\n\nA thumbnail *target* defines the set of operations to be performed by the plugin.  If no target is specified then the *default* target is executed, which specifies a basic resize operation.  Given that, the following example:\n\n```\n<img src=\"<%= @getThumbnail(\"images/image1.jpg\", { w: 100, h: 100 }) %>\"  alt=\"my image\">\n```\n\nIs equivalent to:\n\n```\n<img src=\"<%= @getThumbnail(\"images/image1.jpg\", \"default\", { w: 100, h: 100 }) %>\"  alt=\"my image\">\n```\n\nThe plugin includes another target, *zoomcrop*, which center-crops the image to the exact width and height supplied, rather than just fitting the image into those boundaries.  To specify the zoomcrop target, just change the example to:\n\n```\n<img src=\"<%= @getThumbnail(\"images/image1.jpg\", \"zoomcrop\", { w: 100, h: 100 }) %>\"  alt=\"my image\">\n```\n\n### Creating your own targets\n\nYou can overide the *default* or *zoomcrop* targets if you wish, or specify completely new ones via the plugin configuration.  For example, lets define a couple more to play with:\n\n```\nplugins:\n\tthumbnails:\n\t\ttargets:\n\t\t\t'sepia': (img, args) ->\n\t\t\t\treturn img.sepia()\n\t\t\t'rotateleft': (img, args) ->\n\t\t\t\treturn img.rotate('black', -90)\n```\n\n*img* is a reference to a gm image object.  The target function must also return a gm image object.\n\nThe *args* argument is just an object containing the w, h, q parameters passed to `@getThumbnail()`\n\nYou can use any GraphicsMagick/ImageMagick operation supported by the gm module.  You can find the details of those in the [gm docs](http://aheckmann.github.com/gm/docs.html).\n\nTo run one of our new targets, we can do the following:\n\n```\n<img src=\"<%= @getThumbnail(\"images/image1.jpg\", 'medium', 'sepia' %>\"  alt=\"my image\">\n```\n\nNote that targets and presets can be passed to `@getThumbnail` in any order, and intermixed as you like.  The only caveat is that a target and preset cannot have the same name, otherwise the plugin won't know which one you're talking about.\n\nNote however that in contrast to the presets, the default target is only run if no other targets are specified.  So for the above example, the image is not resized at all.\n\n### Running multiple targets\n\nYou can pass in more than one target to `@getThumbnail()` and they will be executed in order.\n\nFor example, you could do the following to get a small zoom-cropped, sepia'd and rotated image:\n\n```\n<img src=\"<%= @getThumbnail(\"images/image1.jpg\", 'small', 'zoomcrop', 'sepia', 'rotateleft' %>\"  alt=\"my image\">\n```\n\nOf course if this was a common occurence on your site, you would be much better off building a target to do it all in one go, like so:\n\n```\nplugins:\n\tthumbnails:\n\t\ttargets:\n\t\t\t'doitall': (img, args) ->\n\t\t\t\treturn img\n\t\t\t\t\t.quality(args.q)\n\t\t\t\t\t.gravity('Center')\n\t\t\t\t\t.resize(args.w, args.h, '^')\n\t\t\t\t\t.crop(args.w, args.h)\n\t\t\t\t\t.sepia()\n\t\t\t\t\t.rotate('black', -90)\n```\n\n### Overriding the default target\n\nYou can assign a target name to `default` in the plugin configuration to make that target the new default action.  For example, to make `zoomcrop` the new default:\n\n```\nplugins:\n\tthumbnails:\n\t\ttargets:\n\t\t\t'default': 'zoomcrop'\n```\n\n## History\nYou can discover the history inside the `History.md` file\n\n## License\nLicensed under the incredibly [permissive](http://en.wikipedia.org/wiki/Permissive_free_software_licence) [MIT License](http://creativecommons.org/licenses/MIT/)\n<br/>Copyright &copy; 2013 [Richard Antecki](http://richard.antecki.id.au)\n\n## Contributors\n- [Richard Antecki](https://github.com/rantecki)\n- [Jon Baker](https://github.com/miletbaker)",
  "readmeFilename": "README.md",
  "_id": "docpad-plugin-thumbnails@2.1.0",
  "_from": "docpad-plugin-thumbnails@"
}
