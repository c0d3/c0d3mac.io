// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

module.exports = function(BasePlugin) {
  var Thumbnails, balUtil, fs, gm, pathUtil;
  gm = require('gm');
  pathUtil = require('path');
  fs = require('fs');
  balUtil = require('bal-util');
  return Thumbnails = (function(_super) {

    __extends(Thumbnails, _super);

    Thumbnails.prototype.name = 'thumbnails';

    Thumbnails.prototype.config = {
      presets: {
        'default': {
          w: 150,
          h: 150,
          q: 85
        },
        'tiny-square': {
          w: 50,
          h: 50
        },
        'small-square': {
          w: 150,
          h: 150
        },
        'medium-square': {
          w: 300,
          h: 300
        },
        'large-square': {
          w: 500,
          h: 500
        },
        'tiny-wide': {
          w: 88,
          h: 50
        },
        'small-wide': {
          w: 266,
          h: 150
        },
        'medium-wide': {
          w: 533,
          h: 300
        },
        'large-wide': {
          w: 888,
          h: 500
        }
      },
      targets: {
        'default': function(img, args) {
          return img.quality(args.q).resize(args.w, args.h);
        },
        'zoomcrop': function(img, args) {
          return img.quality(args.q).gravity('Center').resize(args.w, args.h, '^').crop(args.w, args.h);
        }
      },
      imageMagick: false
    };

    Thumbnails.prototype.thumbnailsToGenerate = null;

    Thumbnails.prototype.thumbnailsToGenerateLength = 0;

    function Thumbnails() {
      Thumbnails.__super__.constructor.apply(this, arguments);
      this.thumbnailsToGenerate = {};
    }

    Thumbnails.prototype.merge = function(obj1, obj2) {
      return balUtil.extend(balUtil.extend({}, obj1), obj2);
    };

    Thumbnails.prototype.paramsToString = function(params) {
      var str;
      str = "";
      if (params.w != null) {
        str += "w" + params.w;
      }
      if (params.h != null) {
        str += "h" + params.h;
      }
      if (params.q != null) {
        str += "q" + params.q;
      }
      return str;
    };

    Thumbnails.prototype.extendTemplateData = function(_arg) {
      var config, me, templateData;
      templateData = _arg.templateData;
      me = this;
      config = this.config;
      templateData.getThumbnail = function() {
        var a, args, basename, dstPath, ext, f, generate, msg, mtime, outDirPath, params, relOutDirPath, sep, src, srcPath, stats, suffix, t, targetUrl, targets, thumbfilename, _i, _len;
        src = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        docpad.log('debug', "getThumbnail: src=" + src);
        f = this.getFileAtPath(src);
        if (f) {
          srcPath = f.attributes.fullPath;
          outDirPath = f.attributes.outDirPath;
          relOutDirPath = f.attributes.relativeOutDirPath;
          mtime = f.attributes.mtime;
          basename = f.attributes.basename;
          ext = f.attributes.extension;
          if (ext !== 'jpg' && ext !== 'JPG' && ext !== 'jpeg' && ext !== 'JPEG' && ext !== 'png' && ext !== 'PNG') {
            msg = "Thumbnail: source file extension '" + ext + "' not recognised";
            docpad.error(msg);
            return "";
          }
          targets = [];
          params = config.presets['default'];
          for (_i = 0, _len = args.length; _i < _len; _i++) {
            a = args[_i];
            if (typeof a === 'object') {
              params = me.merge(params, a);
            } else if (typeof a === 'function') {
              params = me.merge(params, a());
            } else {
              if (a in config.targets) {
                targets.push(a);
              } else if (a in config.presets) {
                params = me.merge(params, config.presets[a]);
              } else {
                docpad.log('warn', "thumbnails::getThumbnail: unknown parameter '" + a + "' for image '" + srcPath + "'");
              }
            }
          }
          if (!targets.length) {
            t = config.targets["default"];
            if (!(typeof t === 'function')) {
              if (!(t in config.targets)) {
                docpad.error("thumbnails::getThumbnail: target name '" + t + "' does not exist");
                return "";
              }
              targets.push(t);
            } else {
              targets.push("default");
            }
          }
          sep = pathUtil.sep;
          suffix = ".thumb_" + targets.join("_") + "_" + me.paramsToString(params);
          thumbfilename = basename + suffix + "." + ext;
          dstPath = outDirPath + sep + thumbfilename;
          targetUrl = "/";
          if (relOutDirPath != null ? relOutDirPath.length : void 0) {
            targetUrl += relOutDirPath + "/";
          }
          targetUrl += thumbfilename;
          docpad.log('debug', "thumbnails: got dstPath '" + dstPath + "'");
          docpad.log('debug', "thumbnails: got targetUrl '" + targetUrl + "'");
          if (!(dstPath in me.thumbnailsToGenerate)) {
            generate = false;
            try {
              stats = fs.statSync(dstPath);
              if (stats.mtime < mtime) {
                generate = true;
              }
            } catch (err) {
              generate = true;
            }
            if (generate) {
              docpad.log('info', "thumbnails::getThumbnail: adding " + dstPath + " to queue");
              me.thumbnailsToGenerate[dstPath] = {
                dst: dstPath,
                src: srcPath,
                targets: targets,
                params: params
              };
              me.thumbnailsToGenerateLength++;
            }
          }
          return targetUrl;
        }
        return "";
      };
      return this;
    };

    Thumbnails.prototype.writeAfter = function(opts, next) {
      var config, failures, me, tasks,
        _this = this;
      me = this;
      config = this.config;
      failures = 0;
      if (!this.thumbnailsToGenerateLength) {
        docpad.log('debug', 'thumbnails: nothing to generate');
        return next();
      }
      docpad.log('debug', "thumbnails is generating " + this.thumbnailsToGenerateLength + " thumbnails...");
      tasks = new balUtil.Group(function(err) {
        docpad.log((failures ? 'warn' : 'info'), 'thumbnail generation complete', (failures ? "with " + failures + " failures" : ''));
        return next();
      });
      balUtil.each(this.thumbnailsToGenerate, function(item, dst) {
        var dstPath, params, srcPath, targets;
        dstPath = dst;
        srcPath = item.src;
        targets = item.targets;
        params = item.params;
        docpad.log('debug', "thumbnails::getThumbnail: generating " + dstPath);
        return tasks.push(function(complete) {
          var im, img, t, target_handler, _i, _len;
          if (config.imageMagick) {
            im = gm.subClass({
              imageMagick: true
            });
            img = im(srcPath);
          } else {
            img = gm(srcPath);
          }
          for (_i = 0, _len = targets.length; _i < _len; _i++) {
            t = targets[_i];
            target_handler = config.targets[t];
            img = target_handler(img, params);
          }
          return img.write(dstPath, function(err) {
            if (err) {
              docpad.log('warn', "thumbnails failed to generate: " + dstPath);
              docpad.error(err);
              ++failures;
            } else {
              docpad.log('debug', "thumbnails::getThumbnail: finished generating " + dstPath);
            }
            return complete();
          });
        });
      });
      tasks.async();
      return this;
    };

    Thumbnails.prototype.generateAfter = function() {
      docpad.log('debug', 'thumbnails: generateAfter');
      this.thumbnailsToGenerate = {};
      return this.thumbnailsToGenerateLength = 0;
    };

    return Thumbnails;

  })(BasePlugin);
};
